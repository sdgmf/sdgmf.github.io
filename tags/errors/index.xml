<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>errors on Sdgmf &#39;s Blog</title>
    <link>https://sdgmf.github.io/tags/errors/</link>
    <description>Recent content in errors on Sdgmf &#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 24 Jul 2019 15:16:41 +0800</lastBuildDate>
    
	<atom:link href="https://sdgmf.github.io/tags/errors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GO语言项目应该怎么写?</title>
      <link>https://sdgmf.github.io/posts/goproject/</link>
      <pubDate>Wed, 24 Jul 2019 15:16:41 +0800</pubDate>
      
      <guid>https://sdgmf.github.io/posts/goproject/</guid>
      <description>Golang容易学上手快这是很多人喜欢Golang的原因，但是用好Golang远没有这么简单。最近面试了很多Golang开发者，其中不乏一些在大厂工作过的同学，但是聊起Go语言如何去开发一个项目，基本都是学习了两周，用了什么mvc框架，就开始开发了。到底如何组织一个Go语言的项目？近几年一直都使用Golang开发项目，借鉴了很多社区的经验后，总结了一套认为还不错的实践经验。
本文通过一个完整的项目的示例，从Golang项目的结构、分层思想、依赖注入、错误处理、单元测试、框架选择等方面介绍Go语言项目的开发经验。
目的  提供一个完整的go语言项目编程示例 通过示例项目介绍go语言中的编程思想 介绍项目实例遵守的规范  示例项目 Github源码go-project-sample
包结构 关于golang项目的包结构，Dave Chaney博客《Five suggestions for setting up a Go project》里讨论了package和command的包设计建议，还有一个社区普遍认可的包结构规范project-layout。在这两个两篇文章的知道下，结合常见的互联网微服务项目，我又细化了如下的项目结构。
. ├── api │ └── proto ├── builds ├── cmd │ └── app ├── configs ├── deployments ├── dist │ └── test ├── internal │ ├── app │ │ ├── proxy │ │ │ ├── controllers │ │ │ └── grpcservers │ │ └── tool │ │ └── clients │ └── pkg │ ├── config │ ├── database │ ├── log │ ├── models │ ├── repositorys │ ├── services │ └── transport │ ├── grpc │ └── http └── scripts \cmd 同project-layout</description>
    </item>
    
    <item>
      <title>GO项目示例</title>
      <link>https://sdgmf.github.io/post/goproject/</link>
      <pubDate>Wed, 24 Jul 2019 15:16:41 +0800</pubDate>
      
      <guid>https://sdgmf.github.io/post/goproject/</guid>
      <description>&lt;p&gt;本文通过一个完整的项目的示例，从Golang项目的结构、分层思想、依赖注入、错误处理、单元测试、框架选择等方面介绍Go语言项目的开发经验.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>